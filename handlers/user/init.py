# app/handlers/user/init.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from app.handlers.common import is_admin
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏—é –¥–ª—è –∂–∞–¥–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
from app.database import crud, sessions, models
from app.keyboards import keyboards
import logging

from app.LLM_folder.rag_model import rag

# rag = RAGSystem("config.yaml")
rag.load_data()
router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM:
# awaiting_initial ‚Äì –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫)
# awaiting_secondary ‚Äì –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–∏—á–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (request_human/reask)
class FeedbackState(StatesGroup):
    awaiting_initial = State()
    awaiting_secondary = State()


@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    async with sessions.AsyncSessionLocal() as db:
        await crud.get_or_create_user(db, message.from_user.id)
        conversation = await crud.get_active_conversation(db, message.from_user.id)
        if conversation:
            await crud.complete_conversation(db, conversation, False)

    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")


@router.message(~F.text.startswith('/') & F.text)
async def text_message_handler(message: Message, state: FSMContext):
    if await is_admin(message):
        return
    # a = Message("–ú—ã —É–∂–µ –±–µ–∂–∏–º –í–∞–º –Ω–∞ –ø–æ–º–æ—â—å!")
    # await message.bot.send_message(message.chat_id, a)
    current_state = await state.get_state()
    if current_state:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è ‚Äì –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å (–Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É), –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥."
        )
        return
        
    bot_response, theme = rag.query(message.text)
    # await message.bot.delete_message(message.chat_id, a)
    
    async with sessions.AsyncSessionLocal() as db:
        user = await crud.get_or_create_user(db, message.from_user.id)
        conversation = await crud.get_active_conversation(db, user.telegram_id)

        if not conversation:
            conversation = await crud.create_conversation(db, user.telegram_id)
            conversation = await crud.add_category_to_conversation(db, conversation, theme)

        conversation = await crud.add_message_to_conversation(db, conversation, message.text, False)
        
        # response, theme = rag.query(query)
         # –ó–ê–ú–ï–ù–ò–¢–¨
        # conversation = await crud.add_category_to_conversation(db, conversation, message.text)
        
        conversation = await crud.add_message_to_conversation(db, conversation, bot_response.replace("<p>", "").replace("</p>", ""), True)

        await state.set_state(FeedbackState.awaiting_initial)

        await message.answer(bot_response.replace("<p>", "").replace("</p>", ""), reply_markup=keyboards.get_feedback_kb())


@router.callback_query(F.data == "like")
async def like_handler(callback: CallbackQuery, state: FSMContext):

    current_state = await state.get_state()
    if current_state != FeedbackState.awaiting_initial.state:
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.", show_alert=True)
        return

    async with sessions.AsyncSessionLocal() as db:
        user = await crud.get_or_create_user(db, callback.from_user.id)
        conversation = await crud.get_active_conversation(db, user.telegram_id)
        if conversation:
            await crud.complete_conversation(db, conversation, True)

    await state.clear()

    await callback.message.edit_reply_markup()
    await callback.answer()
    await callback.message.answer("‚úÖ –†–∞–¥, —á—Ç–æ —Å–º–æ–≥ –ø–æ–º–æ—á—å! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â–µ!")


@router.callback_query(F.data == "dislike")
async def dislike_handler(callback: CallbackQuery, state: FSMContext):

    current_state = await state.get_state()
    if current_state != FeedbackState.awaiting_initial.state:
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.", show_alert=True)
        return

    async with sessions.AsyncSessionLocal() as db:
        user = await crud.get_or_create_user(db, callback.from_user.id)
        conversation = await crud.get_active_conversation(db, user.telegram_id)

        # –£–±—Ä–∞–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∑–¥–µ—Å—å
        # if conversation:
        #    await crud.complete_conversation(db, conversation, False)
    await state.set_state(FeedbackState.awaiting_secondary)
    await callback.message.edit_reply_markup()
    await callback.answer()
    await callback.message.answer(
        "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboards.get_feedback_options_kb()
    )


@router.callback_query(F.data == "request_human")
async def human_handler(callback: CallbackQuery, state: FSMContext):

    current_state = await state.get_state()
    if current_state != FeedbackState.awaiting_secondary.state:
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.", show_alert=True)
        return


    async with sessions.AsyncSessionLocal() as db:
        user = await crud.get_or_create_user(db, callback.from_user.id)
        conversation = await crud.get_active_conversation(db, user.telegram_id)

        if conversation:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
            await crud.complete_conversation(db, conversation, False)
            await notify_admins(callback.bot, conversation)

    await state.clear()
    await callback.message.edit_reply_markup()
    await callback.answer()
    await callback.message.answer("üÜò –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")


@router.callback_query(F.data == "reask")
async def reask_handler(callback: CallbackQuery, state: FSMContext):

    current_state = await state.get_state()
    if current_state != FeedbackState.awaiting_secondary.state:
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.", show_alert=True)
        return

    await state.clear()
    await callback.message.delete()
    await callback.message.answer("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑:")
    await callback.answer()


async def notify_admins(bot, conversation):
    try:
        async with sessions.AsyncSessionLocal() as db:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑—å user
            result = await db.execute(
                select(models.Conversation)
                .options(selectinload(models.Conversation.user))
                .where(models.Conversation.id == conversation.id)
            )
            conversation = result.scalars().first()

            if not conversation:
                logging.warning("Conversation not found")
                return

            result = await db.execute(
                select(models.User).where(models.User.is_admin == True)
            )
            admins = result.scalars().all()

            if not admins:
                logging.warning("No admins found for notification")
                return

            history = "\n".join(
                [f"{'Bot' if m['is_bot'] else 'User'}: {m['text']}"
                 for m in conversation.messages]
            )

            for admin in admins:
                try:
                    await bot.send_message(
                        chat_id=admin.telegram_id,
                        text=(
                            f"üö® –ù–û–í–´–ô –ó–ê–ü–†–û–° –ü–û–î–î–ï–†–ñ–ö–ò\n"
                            f"User ID: {conversation.user.telegram_id}\n"
                            f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{history}"
                        )
                    )
                    logging.info(f"Notification sent to admin {admin.telegram_id}")
                except Exception as e:
                    logging.error(f"Error sending to admin {admin.telegram_id}: {str(e)}")

    except Exception as e:
        logging.error(f"Error in notify_admins: {str(e)}", exc_info=True)
