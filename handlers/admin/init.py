from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from app.database import crud, sessions, models
from app.handlers.common import is_admin
from sqlalchemy.future import select
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("send"))
async def send_message_to_user(message: Message, command: CommandObject):
    """
    Handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –µ–≥–æ ID.
    –ö–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç: /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>
    –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admin(message):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –∏—Ö –Ω–∞ user_id –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if not command.args:
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")

    args = command.args.split(maxsplit=1)
    if len(args) < 2:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")

    user_id_str, user_message = args
    if not user_id_str.isdigit():
        return await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    user_message = "–û—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n" + user_message

    target_id = int(user_id_str)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID
        await message.bot.send_message(target_id, user_message)
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}: {str(e)}")
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")


@router.message(Command("report"))
async def report_handler(message: Message):
    async with sessions.AsyncSessionLocal() as db:
        user = await crud.get_or_create_user(db, message.from_user.id)
        if not user.is_admin:
            return

        result = await db.execute(
            select(models.Conversation).filter(
                models.Conversation.is_successful == False
            )
        )
        conversations = result.scalars().all()

        if not conversations:
            await message.answer("‚õî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
            return

        for conv in conversations:
            await db.refresh(conv, ['user'])

            history = "\n".join([f"{'Bot' if m['is_bot'] else 'User'}: {m['text']}" for m in conv.messages])
            await message.answer(
                f"üÜò –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É #ID{conv.id}\n"
                f"User ID: {conv.user.telegram_id}\n"
                f"–ò—Å—Ç–æ—Ä–∏—è:\n{history}"
            )


@router.message(Command("add_admin"))
async def add_admin_handler(message: Message, command: CommandObject):
    if await is_admin(message):
        return

    if not command.args or not command.args.isdigit():
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /add_admin <user_id>")

    target_id = int(command.args)
    async with sessions.AsyncSessionLocal() as db:
        target_user = await crud.update_user_admin_status(db, target_id, True)

    if target_user:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        await message.bot.send_message(
            target_id,
            "üéâ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
        )
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


@router.message(Command("remove_admin"))
async def remove_admin_handler(message: Message, command: CommandObject):
    if not await is_admin(message):
        return

    if not command.args or not command.args.isdigit():
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /remove_admin <user_id>")

    target_id = int(command.args)
    if message.from_user.id == target_id:
        return await message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è")

    async with sessions.AsyncSessionLocal() as db:
        target_user = await crud.update_user_admin_status(db, target_id, False)

    if target_user:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ª–∏—à–µ–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.bot.send_message(
            target_id,
            "üòû –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã"
        )
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
